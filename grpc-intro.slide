gRPC Intro
Easy microservice RPC over HTTP/2
3 Nov 2015
Tags: grcp

Peter P. Gengler
Sr. Software Engineer, JumpCloud
https://github.com/ppg
https://go-talks.appspot.com/github.com/ppg/grpc-intro/grpc-intro.slide

* What is gRPC?

"general RPC over HTTP/2" - [[http://www.grpc.io/]]

- protobuf messages - DSL for describing messages, efficient binary serialization protocol, multiple language support.
- service - Interface Definition Language (IDL),  multiple languages support.
- `*.proto` - write protobuf and service in this file, generate output files (for static languages) or consume directly (in dynamic language).

* Why gRPC?

- Define service in IDL; generate/consume for boiler-plate routing; *but* type-safe with Go still.
- Define message types one time, utilize pre-defined serialization.
- You've probably manually done this for REST services, now just let code generate.
- Break apart functionality into isolated function per service -> microservices.
- Support consistent interface between different languages.

* Getting Started
You'll need some pre-requisites installed:

*protoc:* [[https://github.com/google/protobuf#c-installation---unix]]

- compiles `*.proto` files into output language.
- supports plugin tools; gRPC is one as an example.

*grpc:* go get google.golang.org/grpc

- library for common Go code, like `grpc.Server` and `grpc.ClientConn`.
- works in conjuction with code generated from `protoc`.

* Our example proto file
.code add.proto

- `syntax` calls out we're using proto3 (vs. proto2).
- `package`main` since our code will be generated in top-level directory.
- messages are composed of fields.
- fields are type, name, packing order; *don't*change*packing*order*once*released*.
- `rpc` defines methods to call within service.

* Generated code:

  $ protoc --go_out=plugins=grpc:. add.proto

- protoc is the (C-compiled) binary that reads `*.proto` and helps generates output.
- `--go_out` means look for `protoc-gen-go` binary and pass in parsed `.proto` file to it.
- `protoc-gen-go` generates the actual Go code; in this case to `add.pb.proto`.
- `grpc` is a 'plugin' with options; but their loading system isn't extensible.
- However, `protoc`--foo_out=.`add.proto` will run `protoc-gen-foo`.

* Generated code (messages):
.code add.pb.go /type NumericRequest struct/,/}/
.code add.pb.go /type NumericResponse struct/,/}/
- Generates a struct for each message type.
- grpc-go library uses `protobuf` tag with details for serialization/deserialization.
- Makes sure all fields are exported.

* Generated code (service server):
.code add.pb.go /type TestServer interface/,/}/
.code add.pb.go /func RegisterTestServer/,/}/
- Defines the interface that any code implementing this service must meet.
- Defines a function to attach an implementation (`TestServer`) to the gRPC server.
- All calls take a [[https://godoc.org/golang.org/x/net/context][context]] for things like timeout, cancel, etc.
- All calls take the request, and return a response and an error.
- *NOTE:* This is fully type safe, no need to do interface conversions.

* Generated code (service client):
.code add.pb.go /type TestClient interface/,/}/
.code add.pb.go /func NewTestClient/,/[^c]}/
- Defines an interface any client must meet.
- Defines a client that will talk to the generated server.
- All calls take a [[https://godoc.org/golang.org/x/net/context][context]] for things like timeout, cancel, etc.
- All calls take optional `CallOption` to do things like before and after call handlers.
- *NOTE:* This is fully type safe, cannot call with wrong types.


* User code (Service Implementation):
.code server.go /START SERVICE IMPLEMENTATION OMIT/,/END SERVICE IMPLEMENTATION OMIT/

- `context.Context` used for things like timeout, cancel, etc.
- `req.NumericRequest` and `red.NumericResponse` have type safe field values.
- However, can be zero value so must check that still.
- *NOTE:* protobuf v2 had an optional/required field, but v3 removed for some reason?

* User code (Insecure Server):
.code server.go /func main/,/^}/
- `RegisterTestServer` is auto-generated and enforces that the service meets the interface described by the proto file.

* User code (Insecure Client):
.code client.go /func main/,/^}/
- `NewTestClient` returns an interface that is auto-generated and therefore enforces type safety on all the RPC calls.

* User code (Insecure Summary):
  $ go run server.go add.pb.go
  $ go run client.go add.pb.go 1 2

- Minimal code to decide transport information and configuration.
- Extensible through `ServerOption`, `DialOption` and `CallOption` interfaces.


* User code (Secure Server):
.code server_tls.go /func main/,/^}/

* User code (Secure Client):
.code client_tls.go /func main/,/^}/

* User code (Secure Summary):
  $ go run server_tls.go add.pb.go
  $ go run client_tls.go add.pb.go 1 2

- Additional complexity to load certs and let Server/Dialer know, but no more.
- `NewServerTLSFromFile` and `NewClientTLSFromFile` are helper functions, can really do more things with TLS creds if desired (i.e. mutual TLS).


* User code (Improved API proto):
.code add_better.proto
- Shows how to use `enum`.
- Shows how to use `repeated`.

* User code (Improved API Implementation):
.code server_better.go /START SERVICE IMPLEMENTATION OMIT/,/END SERVICE IMPLEMENTATION OMIT/
- Auto-generated code translates `repeated` to an array, `enum` to consts.

* User code (Improved API Summary):
  $ go run server_better.go add_better.pb.go
  $ go run client_better.go add_better.pb.go 0 1 2
  $ go run client_better.go add_better.pb.go 1 1 2 3

- Lots more features: [[https://developers.google.com/protocol-buffers/docs/proto3]]
- [[https://github.com/grpc/grpc-go][grpc-go]] has okay documentation, but remember you generate a code file; try different things, see how they translate into Go code, pick what you like.


* Multi-language Support (Node.js)
*Install:* [[https://github.com/grpc/grpc/tree/master/src/node]]
*Generate:* N/A - dynamically reads `.proto` file.
*Client:*
.code client.js
  $ node client.js 1 2

* Multi-language Support (Ruby)
*Install:* `gem`install`grpc`
*Generate:*

  $ protoc --ruby_out=lib --grpc_out=lib --plugin=protoc-gen-grpc=`which grpc_ruby_plugin` add.proto

*Client:*
.code client.rb
  $ ruby client.rb 1 2

* What Else?

- HTTP/2 has streaming support, gRPC supports natively; can reduce connection overhead; can use like channel communication, but external vs. internal.
- `protoc` is extensible; generate code vs. type unsafe hooks; i.e. [[https://github.com/gengo/grpc-gateway][grpc-gateway]] to provide HTTP RESTful JSON for service.
- Mostly stable, but active; i.e. [[https://github.com/grpc/grpc-java/issues/428][Client-side load balancing]] in the works.

*More*microservice*'things':*

- [[https://github.com/go-kit/kit][go-kit]] - less type-safe, more extensible; can use gRPC; could port concepts into gRPC needs.
- [[https://github.com/myodc/go-micro][go-micro]] - another flexible option, more REST like; again porting options.
